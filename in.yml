pry-nav:
  commands: [ continue, next, step ]
  desc: Like its bigger, 1.9 brother pry-debugger, allows basic stepping
  use cases:
    - Making the basic "require'pry';binding.pry" from a script come alive.
    - In conjunction with pry-rescue, to explore failing tests.
    - Following calls into other libs.
  url: https://github.com/nixme/pry-nav#readme

pry-rescue:
  commands: [ try-again, cd-cause ]
  desc: Provides `Pry.rescue do … end` to capture any exceptions and start pry
    from the context of the source of the exception.
  use cases:
    - Shortens write-run-debug cycles when exceptions are involved.
    - Specifically, RSpec integration. https://github.com/exad/zu/blob/master/spec/spec_helper.rb#L15
    - Exploring causes of hard-to-replicate exceptions.
  url: https://github.com/ConradIrwin/pry-rescue#readme

pry-remote:
  desc: Starts Pry, listening on a socket, that you can then connect to.
  use cases:
    - Debugging odd glitches, like ones that only occur in production.
    - Cases like with pry-remote but where encryption/auth is needed.
    - "…TODO: fill this list out"
  url: https://github.com/simulacre/pry-remote-em#readme

pry-doc:
  commands: [ 'enhanced ?', 'enhanced $' ]
  desc: >-
    Allows you to look into the Ruby builtin classes with the ? and $ commands.
  use cases:
    - '? [].pop'
    - '$ [].pop'
    - …etc.
  url: https://github.com/banister/pry-doc

pry-theme:
  commands: [ pry-theme ]
  desc: Alternative syntax highlighting.
  use cases:
    - Being more snazzy
    - Making pry more like your editor, so you can scan more easily.
  url: https://github.com/kyrylo/pry-theme

pry-pretty-numeric:
  desc: >-
    A very simple, but nice, plugin. Turns 12345689 into 12_345_689 on output
    (Which is legal Ruby input).
    Note that this currently gets hidden with the awesome_print output.
  use cases:
    - Any time you have big numbers.
  url: https://github.com/genki/pry-pretty-numeric

pry-syntax-hacks:
  commands: []
  desc: >-
    Cirwin's wild bag of tricks. The caveat is that it's pretty wild and
    tricky. Especially since input with `@`s can get rewritten as an
    instance_variable_get. Still, this is only a matter of understanding the
    dialect used, and adapting accordingly.
  use cases:
    - Direct member access; User.new.@secret_password
    - Calling private methods; User.new.!hash_password('foo')
    # TODO: - %w(foo@bar.com biz@buz.com).map &User.:find_by_email
    - Accessing Pry outer bindings; cd (a = Object.new)  then  puts ../a
  url: https://github.com/ConradIrwin/pry-syntax-hacks#readme

pry-highlight:
  commands: [ '>>' ]
  desc: Reformat strings with pretty-printing. Auto-detects JSON/XML/Ruby.
  use cases:
    - After a method produces ugly XML, do ">>" by itself to see it prettied.
    - Pass in the string as an arg, e.g., >> '{"a":1}'
    - Pass in any Ruby as an arg, >> File.read("/var/www/foo.html")
    # TODO - >> -t javascript "function hi() { return 'bye' }")
  url: https://github.com/ConradIrwin/pry-highlight#readme

pry-git:
  commands: [ 'git add', 'git blame', 'git diff' ]
  desc: Method-level git commands.
  use cases:
    - Blame/diff a specific method.
  url: https://github.com/pry/pry-git

pry-awesome_print:
  desc: >-
    An alternative printing style. A little funky, but more detailed than
    default Pry, especially for complex objects.
  use cases:
    - Compare the output of the large `_pry_` object with and without this.
    - Array indices are shown, so you can enter them in the next REPL line.
    - If you want to see the old output, you can `obj.inspect`
  url: https://github.com/michaeldv/awesome_print#readme
